name: AVX2

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CMAKE_C_COMPILER: gcc
  CMAKE_CXX_COMPILER: g++
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install Ninja and git
      run: sudo apt install ninja-build git

    - name: Install Google benchmark
      run: git clone https://github.com/google/benchmark; cmake -S benchmark -B benchmark/build -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_ENABLE_TESTING=NO ; cmake --build benchmark/build; cmake --install benchmark/build --prefix ~/.local

    - name: Install Exo
      run: git clone https://github.com/exo-lang/exo.git ; cd exo; git checkout main; python -m pip install build ; python -m build . ; python -m pip install dist/*.whl

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} --preset avx2

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build/avx2 --config ${{env.BUILD_TYPE}}

    - name: Test Codegen
      working-directory: ${{github.workspace}}/build/avx2
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --test-dir ${{github.workspace}}/build/avx2 -C ${{env.BUILD_TYPE}} -R codegen

    - name: Test Correctness
      working-directory: ${{github.workspace}}/build/avx2
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --test-dir ${{github.workspace}}/build/avx2 -C ${{env.BUILD_TYPE}} -R correctness
